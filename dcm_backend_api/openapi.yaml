openapi: 3.0.3
info:
  title: DCM Backend - OpenAPI-Document
  description: |-
    This is the OpenAPI 3.0 specification describing the containers used
    for the backend in the context of the dcm in the lzvnrw-project.
  version: 2.5.0
servers:
  - url: 'http://localhost:8080/'
externalDocs:
  description: See repository hosted by University of MÃ¼nster
  url: https://zivgitlab.uni-muenster.de/ULB/lzvnrw/team-se/dcm-backend-api
tags:
  - name: ingest
    description: ingest-related endpoints
  - name: config
    description: configuration-related endpoints
  - name: job
    description: job execution-related endpoints
  - name: user
    description: user-related endpoints
  - name: workspace
    description: workspace-related endpoints
  - name: template
    description: template-related endpoints
paths:
  /ping:
    get:
      summary: ping
      description: Use as connection test. Returns 'pong'.
      operationId: ping
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: pong
        '400':
          $ref: '#/components/responses/400BadRequest'
  /status:
    get:
      summary: container status
      description: Returns Status (readiness) of container.
      operationId: get_status
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /identify:
    get:
      summary: container self-description
      description: Returns a detailed description of the container properties.
      operationId: identify
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelfDescription'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /report:
    get:
      summary: get report
      description: |-
        Returns Report if the job associated with the given token exists.
      operationId: get_report
      tags:
        - ingest
      parameters:
        - $ref: '#/components/parameters/Token'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Report'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/JobData'
                    example:
                      data:
                        success: false
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '503':
          $ref: '#/components/responses/503Busy'
  /ingest:
    get:
      summary: get ingest status
      description:
        On success, returns archive-specific information on the requested
        object.
      operationId: ingest_status
      tags:
        - ingest
      parameters:
        - in: query
          name: archiveId
          required: true
          description: unique identifier for archive configuration
          example: dab3e1bf-f655-4e57-938d-d6953612552b
          schema:
            $ref: '#/components/schemas/ConfigId'
        - in: query
          name: depositId
          required: true
          description: deposit identifier
          example: "123456"
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobData'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
        '502':
          $ref: '#/components/responses/502BadGateway'
    post:
      summary: trigger ingest
      description:
        Triggers an ingest of a Submission Information Package (SIP)
        into the archive system.
        If the request is accepted, a 201-response is triggered
        containing a JobToken.
      operationId: ingest
      tags:
        - ingest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ingest:
                  type: object
                  properties:
                    archiveId:
                      type: string
                      description:
                        archive configuration id (not implemented yet)
                      example: 00873df3-150b-47f7-aceb-873de18c1cac
                    target:
                      type: object
                      description: |-
                        archive target configuration; expected properties
                        depend on the type of archive

                        ### 'rosetta-rest-api-v0':
                        See 'RosettaTarget'-schema
                      additionalProperties: true
                      example:
                        subdirectory: "path/to/resource"
                  required:
                    - archiveId
                    - target
                token:
                  type: string
                  description:
                    idempotency identifier; if submitted previously, returns
                    the associated job token; otherwise uses this value as
                    new token's value
                  example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
                callbackUrl:
                  $ref: '#/components/schemas/CallbackUrl'
              required:
                - ingest
      callbacks:
        termination:
          $ref: '#/components/callbacks/termination'
      responses:
        '201':
          $ref: '#/components/responses/201AcceptedSubmission'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
        '503':
          $ref: '#/components/responses/503Busy'
    delete:
      summary: abort job
      description:
        Aborts the execution of a job (if already running) or removes it
        from queue (otherwise). This operation is performed
        synchronously.
      operationId: abort_ingest
      tags:
        - ingest
      parameters:
        - $ref: '#/components/parameters/Token'
        - name: broadcast
          in: query
          description:
            whether this request should be broadcasted
            (only relevant in parallel deployment and only if message
            broadcasting is configured)
          schema:
            type: boolean
            default: true
          required: false
        - name: re-queue
          in: query
          description:
            whether the associated token should be added to the queue
            again
          schema:
            type: boolean
            default: false
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                origin:
                  type: string
                  description: verbose origin of request
                  example: frontend
                reason:
                  type: string
                  description: verbose reason for request
                  example: user abort
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example:
                  "successfully aborted '37ee72d6-80ab-4dcd-a68d-f8d32766c80d'"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '502':
          $ref: '#/components/responses/502BadGateway'
  /job/configure:
    get:
      summary: get job config
      description: Returns job configuration by id.
      operationId: get_job_config
      tags:
        - config
        - job
      parameters:
        - $ref: '#/components/parameters/ConfigId'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ConfigurationMetadataCreated'
                  - $ref: '#/components/schemas/ConfigurationMetadataModified'
                  - $ref: '#/components/schemas/JobConfiguration'
                  - type: object
                    properties:
                      id:
                        type: string
                        description: job configuration identifier
                        example: 26046769-6f0f-4dc4-8725-0cfaa74b9c00
                      workspaceId:
                        type: string
                        description: workspace identifier
                        example: 871d62ad-34bb-4a7e-8c45-780ab1918398
                      latestExec:
                        $ref: '#/components/schemas/Token'
                      scheduledExec:
                        $ref: '#/components/schemas/ISODateTime'
                    required:
                      - id
        '400':
          $ref: '#/components/responses/400BadRequest'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
        '404':
          $ref: '#/components/responses/404NoTarget'
    post:
      summary: set job configuration
      description: |-
        Writes job configuration-data and returns configuration id.

        If the field 'id' in the given JobConfiguration is omitted, a
        new id is generated instead.
      operationId: set_job_config
      tags:
        - config
        - job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ConfigurationMetadataCreated'
                - $ref: '#/components/schemas/JobConfiguration'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/ConfigId'
                required:
                  - id
        '400':
          $ref: '#/components/responses/400BadRequest'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
        '409':
          $ref: '#/components/responses/409Conflict'
    put:
      summary: update job configuration
      description: Updates existing job configuration-data.
      operationId: update_job_config
      tags:
        - config
        - job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ConfigurationMetadataModified'
                - $ref: '#/components/schemas/JobConfiguration'
                - type: object
                  properties:
                    id:
                      type: string
                      description: job configuration identifier
                      example: 26046769-6f0f-4dc4-8725-0cfaa74b9c00
                  required:
                    - id
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
    options:
      summary: list job config ids
      description: Returns an array of job configuration ids.
      operationId: list_job_configs
      tags:
        - config
        - job
      parameters:
        - in: query
          name: templateId
          required: false
          description: template identifier
          schema:
            type: string
            example: 871d62ad-34bb-4a7e-8c45-780ab1918398
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigId'
    delete:
      summary: delete job config
      description: Deletes job configuration by id.
      operationId: delete_job_config
      tags:
        - config
        - job
      parameters:
        - $ref: '#/components/parameters/ConfigId'
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: "Deleted config 'dab3e1bf-f655-4e57-938d-d6953612552b'."
        '400':
          $ref: '#/components/responses/400BadRequest'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
  /job:
    get:
      summary: get job info
      description: |-
        Returns job info if the job associated with the given token exists.
      operationId: get_job_info
      tags:
        - job
      parameters:
        - in: query
          name: token
          required: true
          description: unique identifier for jobs
          example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
          schema:
            $ref: '#/components/schemas/Token'
        - in: query
          name: keys
          required: false
          description: |-
            comma-separated list of properties to be collected
            (from those of the response object schema in this endpoint)

            if omitted, all available properties are returned

            token will always be included
          schema:
            type: string
            example: token,jobConfigId,status
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                description: job info object
                properties:
                  token:
                    type: string
                    description: job token
                  jobConfigId:
                    type: string
                    description: associated job configuration id
                    nullable: true
                  userTriggered:
                    type: string
                    description: user identifier
                    example: adbe3793-1b77-4ee1-ad64-447be529b21c
                  datetimeTriggered:
                    $ref: '#/components/schemas/ISODateTime'
                  triggerType:
                    type: string
                    description: trigger type
                    enum:
                      - manual
                      - scheduled
                      - onetime
                      - test
                  status:
                    type: string
                    description: job status
                    enum:
                      - queued
                      - running
                      - completed
                      - aborted
                  success:
                    type: boolean
                    description:
                      whether all records in this job have been processed
                      successfully
                    example: true
                  datetimeStarted:
                    $ref: '#/components/schemas/ISODateTimeMicro'
                  datetimeEnded:
                    $ref: '#/components/schemas/ISODateTimeMicro'
                  report:
                    type: object
                    description: |-
                      job report object

                      See Job Processor API for details on fields data
                      and children.
                    allOf:
                      - $ref: '#/components/schemas/Report'
                      - type: object
                        properties:
                          data:
                            type: object
                            additionalProperties: true
                          children:
                            type: object
                            additionalProperties: true
                  templateId:
                    type: string
                    description: template identifier
                    example: 871d62ad-34bb-4a7e-8c45-780ab1918398
                  workspaceId:
                    type: string
                    description: workspace identifier
                    example: 871d62ad-34bb-4a7e-8c45-780ab1918398
                  records:
                    type: array
                    description:
                      list of completed records associated with this job
                    items:
                      $ref: '#/components/schemas/Record'
                required:
                  - token
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
        '503':
          $ref: '#/components/responses/503Busy'
    post:
      summary: trigger job execution
      description:
        Triggers the execution of a job associated with a configuration
        id.
        If the request is accepted, a 201-response is triggered
        containing a JobToken (generated by the Job Processor).
      operationId: run
      tags:
        - job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: '#/components/schemas/ConfigId'
                token:
                  type: string
                  description:
                    idempotency identifier; if submitted previously, skips
                    re-submission to the job processor
                  example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
                userTriggered:
                  type: string
                  description: user identifier
                  example: adbe3793-1b77-4ee1-ad64-447be529b21c
              required:
                - id
      callbacks:
        termination:
          $ref: '#/components/callbacks/termination'
      responses:
        '201':
          $ref: '#/components/responses/201AcceptedSubmission'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
        '500':
          $ref: '#/components/responses/500ServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
    options:
      summary: list jobs
      description:
        Returns an array of jobs. The list can be filtered by providing
        a valid configuration id or status-values.
      operationId: list_jobs
      tags:
        - job
      parameters:
        - $ref: '#/components/parameters/OptionalConfigId'
        - in: query
          name: status
          required: false
          description: |-
            comma-separated list of status identifiers

            allowed values are
            * scheduled
            * queued
            * running
            * completed
            * aborted
          schema:
            type: string
            example: queued,running
        - in: query
          name: from
          required: false
          description:
            filter output with respect to datetimeStarted and datetimeEnded
          schema:
            type: string
            description: ISO-8601 datetime
            pattern: ^[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}(:[0-9]{2}(:[0-9]{2}(\.[0-9]{6}([+-][0-9]{2}:[0-9]{2})?)?)?)?)?)?)?$
            example: "2024-01-01"
        - in: query
          name: to
          required: false
          description:
            filter output with respect to datetimeStarted and datetimeEnded
          schema:
            type: string
            description: ISO-8601 datetime
            pattern: ^[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}(:[0-9]{2}(:[0-9]{2}(\.[0-9]{6}([+-][0-9]{2}:[0-9]{2})?)?)?)?)?)?)?$
            example: "2024-01-01"
        - in: query
          name: success
          required: false
          description: filter output with respect to job success
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: list of matching token values
                items:
                  $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
    delete:
      summary: abort job
      description:
        Aborts job based on its JobToken-value. This operation is
        performed synchronously. If given token is unknown, the request
        is silently ignored.
      operationId: abort
      tags:
        - job
      parameters:
        - $ref: '#/components/parameters/Token'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                origin:
                  type: string
                  description: verbose origin of request
                  example: frontend
                reason:
                  type: string
                  description: verbose reason for request
                  example: user abort
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: "Aborted job '37ee72d6-80ab-4dcd-a68d-f8d32766c80d'."
        '400':
          $ref: '#/components/responses/400BadRequest'
        '502':
          $ref: '#/components/responses/502BadGateway'
  /job-test:
    post:
      summary: run test-job
      description:
        Triggers the execution of a test-job using the given job-
        configuration. A test-job is limited to the dcm-internal stages
        of the processing pipeline.

        If the request is accepted, a 201-response is triggered
        containing a JobToken (generated by the Job Processor).

        Note that some properties (e.g., scheduling) will be ignored.
      operationId: run_test_job
      tags:
        - config
        - job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobConfiguration'
      responses:
        '201':
          $ref: '#/components/responses/201AcceptedSubmission'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
        '500':
          $ref: '#/components/responses/500ServerError'
        '502':
          $ref: '#/components/responses/502BadGateway'
  /job/records:
    get:
      summary: get records
      description: |-
        Returns an array of job records. At least one of the (mutually
        exclusive) query-filters 'id' and 'token' is required.
      operationId: get_records
      tags:
        - job
      parameters:
        - in: query
          name: token
          required: false
          description: unique identifier for jobs
          example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
          schema:
            $ref: '#/components/schemas/Token'
        - in: query
          name: id
          required: false
          description: unique identifier for job configurations
          example: dab3e1bf-f655-4e57-938d-d6953612552b
          schema:
            $ref: '#/components/schemas/ConfigId'
        - in: query
          name: success
          required: false
          description: filter output with respect to job success
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
  /user:
    post:
      summary: authenticate user
      description: Validates credentials for an authentication request.
      operationId: login
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConfiguration'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          description: failed
          content:
            text/plain:
              schema:
                type: string
                example: FAILED
        '403':
          description: inactive user
          content:
            text/plain:
              schema:
                type: string
                example: account is inactive
        '422':
          $ref: '#/components/responses/422SemanticProblem'
  /user/password:
    put:
      summary: change user password
      description: Changes user password.
      operationId: change_user_password
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserCredentials'
              - type: object
                properties:
                  newPassword:
                    type: string
                    description: new user password
                    format: password
              required:
                - newPassword
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          description: failed
          content:
            text/plain:
              schema:
                type: string
                example: FAILED
        '422':
          $ref: '#/components/responses/422SemanticProblem'
  /user/configure:
    options:
      summary: list users
      description: Returns an array of user identifiers.
      operationId: list_users
      tags:
        - user
        - config
      parameters:
        - in: query
          name: group
          required: false
          description: |-
            comma-separated list of group identifiers
          schema:
            type: string
            example: admin
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  description: user identifier
                  type: string
                example:
                  - user0
                  - user1
        '400':
          $ref: '#/components/responses/400BadRequest'
    get:
      summary: get user config
      description: Returns user configuration by userId.
      operationId: get_user_config
      tags:
        - config
        - user
      parameters:
        - $ref: '#/components/parameters/ConfigId'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ConfigurationMetadataCreated'
                  - $ref: '#/components/schemas/ConfigurationMetadataModified'
                  - $ref: '#/components/schemas/UserConfiguration'
                  - type: object
                    properties:
                      id:
                        type: string
                        description: user identifier
                        example: adbe3793-1b77-4ee1-ad64-447be529b21c
                    required:
                      - id
        '400':
          $ref: '#/components/responses/400BadRequest'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
        '404':
          $ref: '#/components/responses/404NoTarget'
    post:
      summary: create new user config
      description: Creates a new user configuration.
      operationId: create_user
      tags:
        - config
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ConfigurationMetadataCreated'
                - $ref: '#/components/schemas/UserConfiguration'
                - type: object
                  properties:
                    username:
                      type: string
                      description: user name
                      example: user0
                    email:
                      type: string
                      description: user email address
                      format: email
                      example: pete@lzv.nrw
                  required:
                    - username
                    - email
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/ConfigId'
                required:
                  - id
        '400':
          $ref: '#/components/responses/400BadRequest'
        '409':
          $ref: '#/components/responses/409Conflict'
    put:
      summary: update existing user config
      description: Updates existing user configuration.
      operationId: update_user
      tags:
        - config
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ConfigurationMetadataModified'
                - $ref: '#/components/schemas/UserConfiguration'
                - type: object
                  properties:
                    id:
                      type: string
                      description: user identifier
                      example: adbe3793-1b77-4ee1-ad64-447be529b21c
                  required:
                    - id
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
    delete:
      summary: delete user config
      description: Deletes user configuration.
      operationId: delete_user_config
      tags:
        - config
        - user
      parameters:
        - $ref: '#/components/parameters/ConfigId'
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: "Deleted config 'dab3e1bf-f655-4e57-938d-d6953612552b'."
        '400':
          $ref: '#/components/responses/400BadRequest'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
  /workspace/configure:
    get:
      summary: get workspace configuration
      description: Returns workspace configuration by id.
      operationId: get_workspace
      tags:
        - config
        - workspace
      parameters:
        - $ref: '#/components/parameters/ConfigId'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ConfigurationMetadataCreated'
                  - $ref: '#/components/schemas/ConfigurationMetadataModified'
                  - $ref: '#/components/schemas/Workspace'
                  - type: object
                    properties:
                      id:
                        type: string
                        description: workspace identifier
                        example: 871d62ad-34bb-4a7e-8c45-780ab1918398
                    required:
                      - id
        '400':
          $ref: '#/components/responses/400BadRequest'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
        '404':
          $ref: '#/components/responses/404NoTarget'
    post:
      summary: create workspace configuration
      description: |-
        Creates new workspace configuration and returns its id.

        If the field 'id' in the given Workspace is omitted, a
        new id is generated instead.
      operationId: create_workspace
      tags:
        - config
        - workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ConfigurationMetadataCreated'
                - $ref: '#/components/schemas/Workspace'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/ConfigId'
                required:
                  - id
        '400':
          $ref: '#/components/responses/400BadRequest'
        '409':
          $ref: '#/components/responses/409Conflict'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
    put:
      summary: update workspace configuration
      description: Updates existing workspace configuration-data.
      operationId: update_workspace
      tags:
        - config
        - workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ConfigurationMetadataModified'
                - $ref: '#/components/schemas/Workspace'
                - type: object
                  properties:
                    id:
                      type: string
                      description: workspace identifier
                      example: 871d62ad-34bb-4a7e-8c45-780ab1918398
                  required:
                    - id
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
    options:
      summary: list workspaces
      description: Returns an array of workspace ids.
      operationId: list_workspaces
      tags:
        - config
        - workspace
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigId'
        '400':
          $ref: '#/components/responses/400BadRequest'
    delete:
      summary: delete workspace
      description: Deletes workspace configuration by id.
      operationId: delete_workspace
      tags:
        - config
        - workspace
      parameters:
        - $ref: '#/components/parameters/ConfigId'
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: "Deleted config 'dab3e1bf-f655-4e57-938d-d6953612552b'."
        '400':
          $ref: '#/components/responses/400BadRequest'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
  /template/configure:
    get:
      summary: get template configuration
      description: Returns template configuration by id.
      operationId: get_template
      tags:
        - config
        - template
      parameters:
        - $ref: '#/components/parameters/ConfigId'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ConfigurationMetadataCreated'
                  - $ref: '#/components/schemas/ConfigurationMetadataModified'
                  - $ref: '#/components/schemas/Template'
                  - type: object
                    properties:
                      id:
                        type: string
                        description: template identifier
                        example: 26046769-6f0f-4dc4-8725-0cfaa74b9c00
                    required:
                      - id
        '400':
          $ref: '#/components/responses/400BadRequest'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
        '404':
          $ref: '#/components/responses/404NoTarget'
    post:
      summary: create template configuration
      description: |-
        Creates new template configuration and returns its id.

        If the field 'id' in the given Template is omitted, a
        new id is generated instead.
      operationId: create_template
      tags:
        - config
        - template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ConfigurationMetadataCreated'
                - $ref: '#/components/schemas/Template'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/ConfigId'
                required:
                  - id
        '400':
          $ref: '#/components/responses/400BadRequest'
        '409':
          $ref: '#/components/responses/409Conflict'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
    put:
      summary: update template configuration
      description: Updates existing template configuration-data.
      operationId: update_template
      tags:
        - config
        - template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ConfigurationMetadataModified'
                - $ref: '#/components/schemas/Template'
                - type: object
                  properties:
                    id:
                      type: string
                      description: template identifier
                      example: 26046769-6f0f-4dc4-8725-0cfaa74b9c00
                  required:
                    - id
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
    options:
      summary: list templates
      description: Returns an array of template ids.
      operationId: list_templates
      tags:
        - config
        - template
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigId'
        '400':
          $ref: '#/components/responses/400BadRequest'
    delete:
      summary: delete template
      description: Deletes template configuration by id.
      operationId: delete_template
      tags:
        - config
        - template
      parameters:
        - $ref: '#/components/parameters/ConfigId'
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: "Deleted config 'dab3e1bf-f655-4e57-938d-d6953612552b'."
        '400':
          $ref: '#/components/responses/400BadRequest'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
  /template/hotfolder-sources:
    get:
      summary: get hotfolder import sources
      description:
        Returns an array of configured import sources available to use
        in a template with 'hotfolder' type.
      operationId: get_hotfolder_sources
      tags:
        - config
        - template
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: array of import source objects
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: import source identifier
                      example: id0
                    name:
                      type: string
                      description: display-name for the import source
                      example: Import Source 1
                    path:
                      type: string
                      description: |-
                        path to import source directory

                        relative to the fs_mount_point of the Import
                        Module-service
                      example: path/to/directory
                    description:
                      type: string
                      description: description of the import source
                      example: Some description
                  required:
                    - id
                    - name
                    - path
        '400':
          $ref: '#/components/responses/400BadRequest'
components:
  schemas:
    ConfigurationMetadataCreated:
      title: ConfigurationMetadataCreated
      description: configuration creation-metadata
      type: object
      properties:
        userCreated:
          type: string
          description: user identifier
          example: adbe3793-1b77-4ee1-ad64-447be529b21c
        datetimeCreated:
          $ref: '#/components/schemas/ISODateTime'
    ConfigurationMetadataModified:
      title: ConfigurationMetadataModified
      description: configuration modification-metadata
      type: object
      properties:
        userModified:
          type: string
          description: user identifier
          example: adbe3793-1b77-4ee1-ad64-447be529b21c
        datetimeModified:
          $ref: '#/components/schemas/ISODateTime'
    Template:
      title: Template
      description: template configuration
      type: object
      properties:
        id:
          type: string
          description: template identifier
          example: 26046769-6f0f-4dc4-8725-0cfaa74b9c00
        status:
          type: string
          description: template status
          enum:
            - draft
            - ok
          example: ok
        workspaceId:
          type: string
          description: workspace identifier
          example: 871d62ad-34bb-4a7e-8c45-780ab1918398
        name:
          type: string
          description: template display-name
          example: Template 1
        description:
          type: string
          description: template description
          example: This is a template description.
        type:
          type: string
          description: connection type for this template
          enum:
              - oai
              - hotfolder
              - plugin
          example: oai
        additionalInformation:
          oneOf:
            - type: object
              title: PluginTemplateInfo
              description: custom plugin-import information
              properties:
                plugin:
                  type: string
                  description: plugin identifier
                  example: oai_pmh
                args:
                  type: object
                  example:
                    base_url: "https://www.lzv.nrw/oai"
                    metadata_prefix: oai_dc
                    transfer_url_info:
                      regex: "(https://lzv\\.nrw/oai/transfer=[a-z0-9]+)"
            - type: object
              title: OAITemplateInfo
              description: oai-based import information
              properties:
                url:
                  type: string
                  description: oai-server base url
                  example: https://www.lzv.nrw/oai
                metadataPrefix:
                  type: string
                  description: metadata prefix
                  example: oai_dc
                transferUrlFilters:
                  type: array
                  description:
                    array of filters to extract transfer urls from metadata
                  items:
                    type: object
                    description: transfer url filter
                    properties:
                      regex:
                        type: string
                        description:
                          regular expression that is applied to metadata
                        example: "(https://lzv\\.nrw/oai/transfer=[a-z0-9]+)"
                      path:
                        type: string
                        description:
                          XML XPath-query to limit the regex-matching to
                        example: "./GetRecord/record/metadata/oai_dc:dc/dc:identifier"
                    required:
                      - regex
            - type: object
              title: HotfolderTemplateInfo
              description: hotfolder-import information
              properties:
                sourceId:
                  type: string
                  description: id of the associated hotfolder import-source
                  example: 05d806ad-aba1-4208-ae18-ff0914ce128d
      required:
        - status
    Workspace:
      title: Workspace
      description: workspace configuration
      properties:
        id:
          type: string
          description: workspace identifier
          example: 871d62ad-34bb-4a7e-8c45-780ab1918398
        name:
          type: string
          description: workspace display-name
          example: Workspace 1
        users:
          type: array
          description: array of user-ids associated with this workspace
          items:
            type: string
            description: user-id
          example:
            - user01
            - user02
        templates:
          type: array
          description: array of template-ids associated with this workspace
          items:
            type: string
            description: template-id
          example:
            - template01
            - template02
      required:
        - name
    UserConfiguration:
      title: UserConfiguration
      description: user configuration
      properties:
        id:
          type: string
          description: user identifier
          example: adbe3793-1b77-4ee1-ad64-447be529b21c
        externalId:
          type: string
          description: external user name
          example: userA
        status:
          type: string
          description: user account status identifier
          enum:
            - inactive
            - ok
            - deleted
          example: ok
        username:
          type: string
          description: user name
          example: user0
        firstname:
          type: string
          description: user first name
          example: Pete
        lastname:
          type: string
          description: user last name
          example: Programmer
        email:
          type: string
          description: user email address
          format: email
          example: pete@lzv.nrw
        groups:
          type: array
          description: list of group memberships
          items:
            description: group membership per workspace
            properties:
              id:
                type: string
                description: group identifier
                example: admin
              workspace:
                type: string
                description: workspace identifier
                example: workspace01
            required:
              - name
            example:
              - id: admin
              - id: curator
                workspace: workspace01
        widgetConfig:
          type: object
          description: user-widget configuration
          additionalProperties: true
          example:
            widget0:
              id: events
              x: 0
              y: 0
              props:
                template: 2d6500d3-97a2-411c-8312-1879c7830f46
    UserCredentials:
      title: UserCredentials
      description: user credentials
      properties:
        username:
          type: string
          description: user identifier
          example: user0
        password:
          type: string
          description: login pass
          format: password
          example: password
      required:
        - username
        - password
    JobConfiguration:
      title: JobConfiguration
      description: job configuration
      type: object
      properties:
        id:
          type: string
          description: job configuration identifier
          example: 26046769-6f0f-4dc4-8725-0cfaa74b9c00
        status:
          description: status of the job configuration
          type: string
          enum:
              - draft
              - ok
          example: draft
        templateId:
          type: string
          description: template identifier
          example: 871d62ad-34bb-4a7e-8c45-780ab1918398
        name:
          type: string
          description: configuration name
          example: OAI-Job
        description:
          type: string
          description: configuration description
          example: daily OAI-harvest
        contactInfo:
          type: string
          description: contact information
          example: "data-curator@lzv.nrw"
        dataSelection:
          type: object
          description: import details
          oneOf:
            - title: OAISelectionDetails
              type: object
              description: OAI-PMH selective harvesting details
              properties:
                identifiers:
                  type: array
                  description:
                    list of explicit identifiers

                    this option takes precedence over the selection
                    harvesting options
                  items:
                    type: string
                    description: oai-identifier
                    example: "oai:lzv.nrw:46ddd9fc-2b0c-4c3b-a490-0ed4087238fc"
                  example:
                    - "oai:lzv.nrw:46ddd9fc-2b0c-4c3b-a490-0ed4087238fc"
                    - "oai:lzv.nrw:96365c49-2ff4-447a-a9b8-419d54b53d1f"
                sets:
                  type: array
                  description: list of sets for selective harvest
                  items:
                    type: string
                    description: oai-set
                    example: set0
                  example:
                    - set0
                    - set1
                from:
                  type: string
                  description:
                    lower bound for record date during selective harvest
                  pattern: /[0-9]{4}-[0-9]{2}-[0-9]{2}/
                  example: "2023-08-04"
                until:
                  type: string
                  description:
                    upper bound for record date during selective harvest
                  pattern: /[0-9]{4}-[0-9]{2}-[0-9]{2}/
                  example: "2023-08-04"
            - title: HotfolderSelectionDetails
              type: object
              description: hotfolder import details
              properties:
                path:
                  type: string
                  description:
                    subdirectory relative to the hotfolder import source
                    that is referenced in the associated template
                  example: repo0/part0
        dataProcessing:
          type: object
          description: processing details
          properties:
            mapping:
              type: object
              description:
                metadata mapping; this object should contain only one
                of its defined properties
              properties:
                type:
                  type: string
                  description: mapping type identifier
                  enum:
                    - xslt
                    - python
                    - plugin
                  example: python
                data:
                  # the intended 'oneOf' is broken in the sdk-generator
                  # use 'allOf' as a workaround and rely on app to handle
                  # discrimination (based on 'type')
                  allOf:
                    - title: FileMappingData
                      type: object
                      description:
                        processing via user mapping-script (type 'python'
                        or 'xslt')
                      properties:
                        contents:
                          type: string
                          description: mapping-script file contents
                          example: "<file contents>"
                        name:
                          type: string
                          description: mapping-script file name
                          example: "my-script.py"
                        datetimeUploaded:
                          type: string
                          description: mapping-script upload datetime
                          example: "2024-01-01T00:00:00+01:00"
                    - title: PluginMappingData
                      type: object
                      description:
                        processing via existing mapping-plugin
                        (type 'plugin')
                      properties:
                        plugin:
                          type: string
                          description: plugin identifier
                          example: demo
                        args:
                          type: object
                          description: plugin arguments
                          additionalProperties: true
                          example: {}
              required:
                - type
                - data
            preparation:
              type: object
              description:
                preparation for SIP-building; see DCM Preparation Module
                API for more information
              properties:
                rightsOperations:
                  type: array
                  description:
                    metadata-operations to perform on mapped rights-related metadata
                  items:
                    type: object
                    additionalProperties: true
                  example: []
                sigPropOperations:
                  type: array
                  description: |-
                    metadata-operations to perform on significant properties/
                    PREMIS metadata

                    See IP-specification for details.
                  items:
                    type: object
                    additionalProperties: true
                  example: []
                preservationOperations:
                  type: array
                  description:
                    metadata-operations to perform on mapped preservation-related metadata
                  items:
                    type: object
                    additionalProperties: true
                  example: []
        schedule:
          description: scheduling-related settings
          type: object
          properties:
            active:
              description:
                whether the scheduling for this config is active
              type: boolean
              example: true
            start:
              $ref: '#/components/schemas/ISODateTime'
            end:
              $ref: '#/components/schemas/ISODateTime'
            repeat:
              description: settings for repeating jobs
              type: object
              properties:
                unit:
                  description: execution cadence unit
                  type: string
                  enum:
                    - day
                    - week
                    - month
                  example: day
                interval:
                  description: execution cadence unit value
                  type: integer
                  minimum: 1
                  example: 1
              required:
                - unit
                - interval
          required:
            - active
      required:
        - status
        - templateId
    Status:
      title: ContainerStatus
      description:
        A ContainerStatus gives a summary of the container's status like
        availability for job submissions
      type: object
      properties:
        ready:
          type: boolean
          description: availability of container for a request
          example: true
      required:
        - ready
    ISODateTime:
      title: ISODateTime
      description: ISO-8601 datetime-stamp
      type: string
      pattern: /[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]{2}:[0-9]{2}/
      example: "2024-01-01T00:00:00+01:00"
    ISODateTimeMicro:
      title: ISODateTimeMicro
      description: ISO-8601 datetime-stamp with optional microseconds
      type: string
      pattern: /[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]{6})?[+-][0-9]{2}:[0-9]{2}/
      example: "2024-01-01T00:00:00.000000+01:00"
    ConfigId: # see also components/parameters/ConfigId
      title: ConfigId
      description: unique identifier for configurations
      type: string
      example: dab3e1bf-f655-4e57-938d-d6953612552b
    Token: # see also components/parameters/Token
      title: Token
      description: unique identifier
      type: string
      example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
    JobToken:
      title: JobToken
      description:
        A JobToken is used to uniquely identify a specific job.
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Token'
        expires:
          type: boolean
          description: does the token expire
          example: true
        expires_at:
          $ref: '#/components/schemas/ISODateTime'
      required:
        - value
        - expires
    LogMessage:
      title: LogMessage
      description: |-
        This schema defines the format of the entries occurring in the
        log of a Report. A LogMessage consists of

        * datetime information (regarding time of message creation),
        * an origin (who filed this message), and
        * the actual message.
      type: object
      properties:
        datetime:
          $ref: '#/components/schemas/ISODateTime'
        origin:
          type: string
          description: origin of message creation
          example: Backend
        body:
          type: string
          description: message body
          example: Queued job.
      required:
        - datetime
        - origin
        - body
    Log:
      title: Log
      description: |-
        Common Log categories are: ERROR, WARNING, INFO, EVENT,
        NETWORK, FILE_SYSTEM, STARTUP, SHUTDOWN, USER,
        AUTHENTICATION, and SECURITY.
      type: object
      additionalProperties:
        title: LogCategory
        description: |-
          list of LogMessage objects
        type: array
        items:
          $ref: "#/components/schemas/LogMessage"
      example:
        EVENT:
          - datetime: "2024-01-01T00:00:00+01:00"
            origin: Backend
            body: Queued job.
          - datetime: "2024-01-01T00:00:02+01:00"
            origin: Backend
            body: Job exited normally.
    Record:
      title: Record
      description:
        record generated in a job, e.g., an intellectual entity (IE)
      properties:
        reportId:
          type: string
          description:
            identifier in the context of the report-object
          example: oai:0478b6eb-6270-4a8b-bdc0-49e69a4e3e0d
        success:
          type: boolean
          description:
            whether a problem occurred while processing this record
          example: true
        originSystemId:
          type: string
          description:
            identifier of the origin system
          example: oai:origin
        externalId:
          type: string
          description:
            identifier of the record in the external system
          example: b29bb376-3e2c-4a1e-af90-96c094daf5c3
        sipId:
          type: string
          description:
            SIP (Submission Information Package) identifier assigned by
            the archive system
          example: 86eab680-d4c4-4402-93b3-24a3cc7b9432
        ieId:
          type: string
          description:
            IE (Intellectual Entity) identifier assigned by the archive
            system
          example: ie0
        datetimeProcessed:
          $ref: '#/components/schemas/ISODateTime'
        token:
          $ref: '#/components/schemas/Token'
      required:
        - success
        - reportId
    RosettaTarget:
      type: object
      title: RosettaTarget
      description: rosetta-related request target
      properties:
        subdirectory:
          description:
            name of the SIP-directory to be ingested
          type: string
          example: 2468edf8-6706-4ff0-bd03-04512d082c28
      required:
        - subdirectory
    RosettaRESTResult:
      allOf:
        - $ref: '#/components/schemas/JobDataDetails'
        - type: object
          properties:
            deposit:
              type: object
              description:
                deposit object, see Rosetta REST API documentation
              additionalProperties: true
              example:
                id: "123456"
                status: INPROCESS
                sip_reason: Files rejected
            sip:
              type: object
              description:
                deposit object, see Rosetta REST API documentation
              additionalProperties: true
              example:
                id: "123456"
                status: INPROCESS
                iePids: "0,1,2"
    JobDataDetails:
      title: JobDataDetails
      type: object
      description: |-
        response data depending on type of archive (archiveApi)

        ### 'rosetta-rest-api-v0':
        See 'RosettaRESTResult'-schema
      properties:
        archiveApi:
          title: archiveApi
          description: identifier for an archive system API
          type: string
          enum:
            - rosetta-rest-api-v0
      discriminator:
        propertyName: archiveApi
        mapping:
          'rosetta-rest-api-v0': '#/components/schemas/RosettaRESTResult'
      required:
        - archiveApi
    JobData:
      title: JobData
      description: |-
        job output data (data-property in Report schema)
      type: object
      properties:
        success:
          type: boolean
          description: overall success of the job
          example: false
        details:
          $ref: '#/components/schemas/JobDataDetails'
    Report:
      title: Report
      description: |-
        A Report contains

        * information on job details (host, token),
        * information on the progress of a job,
        * a collection of log messages (categorized), and
        * job output data.
      type: object
      properties:
        host:
          type: string
          description: service url where this report has been generated
          example: https://www.lzv.nrw/transfer_module
        token:
          $ref: '#/components/schemas/JobToken'
        args:
          type: object
          description: request body contents given during submission
        progress:
          type: object
          properties:
            status:
              type: string
              description: job status in processing pipeline
              enum:
                - queued
                - running
                - aborted
                - completed
            verbose:
              type: string
              description: verbose description of job-progress
              example: mapping metadata
            numeric:
              type: integer
              description: numeric representation of progress in percent
              example: 25
          required:
            - status
            - verbose
            - numeric
        log:
          $ref: '#/components/schemas/Log'
      required:
        - host
        - token
        - args
        - progress
        - log
      example:
        host: https://www.lzv.nrw/backend
        token:
          value: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
          expires: true
          expires_at: "2024-01-01T00:00:00+01:00"
        args:
          ingest:
            archiveId: dab3e1bf-f655-4e57-938d-d6953612552b
            target:
              subdirectory: 2468edf8-6706-4ff0-bd03-04512d082c28
        progress:
          status: completed
          verbose: Job terminated normally.
          numeric: 100
        log:
          ERROR:
            - datetime: "2024-01-01T00:00:01+01:00"
              origin: Backend
              body: Problem occurred during SIP-ingest.
          EVENT:
            - datetime: "2024-01-01T00:00:00+01:00"
              origin: Backend
              body: Job accepted.
            - datetime: "2024-01-01T00:00:02+01:00"
              origin: Backend
              body: Job terminated.
    CallbackUrl:
      type: string
      description: job-termination callback url
      example: https://www.lzv.nrw/callback
    Plugin:
      title: Plugin
      type: object
      description: DCM-service plugin
      properties:
        name:
          type: string
          description: plugin identifier
          example: plugin-0
        description:
          type: string
          description: description of plugin features
          example: this plugin performs ...
      required:
        - name
        - description
    DBAdapter:
      title: DBAdapter
      type: object
      description:
        A DBAdapter characterizes an adapter for a database by type and
        initialization settings.
      properties:
        type:
          type: string
          description: which adapter-type to use
          enum:
            - native
            - http
            - postgres
          example: http
        settings:
          type: object
          description: |-
            JSON object used to initialize the adapter

            adapter-specific set of settings (used during
            initialization); see dcm-common.db-subpackage for details
          additionalProperties: true
          example:
            url: https://www.lzv.nrw/db
            timeout: 10
            proxies:
              http: https://www.lzv.nrw/proxy
      required:
        - type
        - settings
    SelfDescription:
      type: object
      description: information regarding the service's properties
      properties:
        description:
          type: string
          description:
            a verbose self-description of the service functionality
          example:
            This service provides endpoints for ...
        version:
          type: object
          description: collection of version strings
          properties:
            api:
              type: string
              description: version string of the implemented API
              example: "0.2.0"
            app:
              type: string
              description: version string of the app
              example: "0.1.0"
            python:
              type: string
              description: version of the python implementation
              example: 3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]
            software:
              type: object
              description: deployed software versions
            lib:
              type: object
              description: deployed library versions
              additionalProperties:
                type: string
                description: version string
                example: "0.1.0"
              example:
                dependency-a: "1.0.0"
                dependency-b: "0.2.0.post1"
          required:
            - api
            - app
            - python
            - software
            - lib
        configuration:
          type: object
          description: service configuration details
          properties:
            settings:
              type: object
              properties:
                allow_cors:
                  type: boolean
                  description: whether CORS requests are allowed
                  example: true
                orchestration:
                  type: object
                  description: orchestration-related settings
                  properties:
                    at_startup:
                      type: boolean
                      description:
                        whether orchestration-processing loop is run at startup
                      example: true
                    queue:
                      $ref: '#/components/schemas/DBAdapter'
                    registry:
                      $ref: '#/components/schemas/DBAdapter'
                    token:
                      type: object
                      description: orchestration token-related settings
                      properties:
                        expiration:
                          type: boolean
                          description: whether job tokens (and their
                            associated info like report) expire
                          example: true
                        duration:
                          type: integer
                          description:
                            time until job token expires in seconds
                          example: 3600
                      required:
                        - expiration
                        - duration
                    debug:
                      type: boolean
                      description: whether to have orchestrator print
                        debug-information
                      example: true
                    controls_api:
                      type: boolean
                      description: whether the orchestration-controls
                        API is available
                      example: true
                    abort:
                      type: object
                      description: |-
                        abort-related settings

                        only relevant in parallel deployment
                      properties:
                        subscription:
                          type: boolean
                          description:
                            whether a subscription to the abort-notifications
                            is made
                          example: true
                        url:
                          type: string
                          description: url of the notification service
                          example: https://www.lzv.nrw/abort-notifications
                        timeout:
                          type: object
                          description: timeout-related settings
                          properties:
                            duration:
                              type: number
                              description: timeout duration
                              example: 1.0
                          required:
                            - duration
                        callback:
                          type: string
                          description: |-
                            url for abort-callbacks

                            if omitted, the subscriber's request address
                            is used (as determined by the notification
                            service)
                          example: https://www.lzv.nrw/subscriber
                      required:
                        - subscription
                    daemon_interval:
                      type: number
                      description:
                        interval of orchestrator-restarts (after crash) in
                        seconds
                      example: 1
                    orchestrator_interval:
                      type: number
                      description: time in seconds between each iteration
                        of the orchestrator's processing loop
                      example: 1
                  required:
                    - at_startup
                    - queue
                    - registry
                    - token
                    - debug
                    - controls_api
                    - abort
                database:
                  type: object
                  description:
                    database-related settings
                  properties:
                    adapter:
                      type: string
                      description: database adapter name
                      example: postgres
                    schemaVersion:
                      type: string
                      description: dcm-database schema version string
                      example: "1.0.0"
                    settings:
                      type: object
                      description: database-related settings
                      properties:
                        poolSize:
                          type: number
                          description: size of database connection-pool
                          example: 10
                        poolOverflow:
                          type: boolean
                          description:
                            whether to allow the pool to overflow during
                            high load (dynamically allocates more connections
                            when needed)
                          example: true
                        connectionTimeout:
                          type: number
                          nullable: true
                          description:
                            duration after which a database connection-
                            attempt times out; a value of null corresponds
                            to no timeout
                          example: 10.0
                        file:
                          type: string
                          nullable: true
                          description:
                            file path for a SQLite database (relative to
                            working directory); null corresponds to an
                            in-memory database
                          example: sqlite.db
                        host:
                          type: string
                          description: PostgreSQL host name
                          example: database
                        name:
                          type: string
                          description: PostgreSQL database name
                          example: dcm-database
                        user:
                          type: string
                          description: PostgreSQL user name
                          example: dcm
                        port:
                          type: string
                          description: PostgreSQL port
                          example: 5432
                        password:
                          type: boolean
                          description: whether PostgreSQL password is set
                          example: true
                        passfile:
                          type: string
                          description: PostgreSQL passfile path
                          example: pass
                  required:
                    - adapter
                    - schemaVersion
                    - settings
                scheduling:
                  type: object
                  description: scheduling-related settings
                  properties:
                    controls_api:
                      type: boolean
                      description:
                        whether the scheduling-controls API is available
                      example: true
                    at_startup:
                      type: boolean
                      description:
                        whether the scheduling-loop is running at startup
                      example: true
                    timezone:
                      type: string
                      nullable: true
                      description:
                        identifier of the native timezone for the scheduler;
                        if null, uses system default

                        See python3's `zoneinfo.available_timezones()` for
                        a list of supported options.
                      example: Europe/Berlin
                  required:
                    - controls_api
                    - at_startup
                    - timezone
                job:
                  type: object
                  description: job-execution related settings
                  properties:
                    timeout:
                      type: object
                      description: service timeout-related settings
                      properties:
                        duration:
                          type: integer
                          description: timeout duration in seconds
                          example: 30
                      required:
                        - duration
                    polling_interval:
                      type: number
                      description: interval of progress-polling in seconds
                      example: 1
                  required:
                    - timeout
                    - polling_interval
                ingest:
                  type: object
                  description: ingest-related settings
                  properties:
                    network:
                      type: object
                      description: network-related settings
                      properties:
                        url:
                          type: string
                          description: url to the archive instance
                          example: https://lzv-test.hbz-nrw.de
                        proxy:
                          type: object
                          description:
                            JSON object containing a mapping of
                            protocol name and corresponding proxy-address
                          additionalProperties:
                            type: string
                          example:
                            http: https://www.lzv.nrw/proxy
                      required:
                        - url
                    archive_identifier:
                      type: string
                    archive_settings:
                      oneOf:
                        - allOf:
                            - type: object
                              title: rosetta
                              description:
                                rosetta-related settings
                              properties:
                                auth:
                                  type: string
                                  description:
                                    path to file with the Authorization
                                    HTTP header for all requests
                                  example: ~/.rosetta/rosetta_auth
                                material_flow:
                                  type: string
                                  description:
                                    ID referencing a Material Flow in rosetta
                                  example: "12345678"
                                producer:
                                  type: string
                                  description:
                                    ID referencing a producer in rosetta
                                  example: "12345678"
                              required:
                                - auth
                                - material_flow
                                - producer
                  required:
                    - network
                    - archive_identifier
                    - archive_settings
                user:
                  type: object
                  description: user API-related settings
                  properties:
                    user_activation:
                      type: boolean
                      description:
                        whether new accounts need activation before use
                      example: true
                    activation_url_fmt:
                      type: string
                      description:
                        python format-string used to generate user
                        activation url
                      example: "https://lzv.nrw/user-activation?pass={password}"
                  required:
                    - user_activation
              required:
                - allow_cors
                - orchestration
                - database
                - scheduling
                - job
                - ingest
                - user
            plugins:
              type: object
              description: mapping of available plugins
              additionalProperties:
                $ref: "#/components/schemas/Plugin"
              example:
                plugin-0:
                  name: plugin-0
                  description: this plugin performs ...
            services:
              type: object
              description:
                mapping of hostname and url for secondary DCM-services
              additionalProperties:
                title: Service
                type: string
                format: url
              example:
                service: <service-url>
          required:
            - settings
            - plugins
            - services
      required:
        - description
        - version
        - configuration
  parameters:
    Token: # see also components/schemas/Token
      in: query
      name: token
      required: true
      description:
        unique identifier for jobs
      example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
      schema:
        $ref: '#/components/schemas/Token'
    ConfigId: # see also components/schemas/ConfigId
      in: query
      name: id
      required: true
      description: unique identifier for configurations
      example: dab3e1bf-f655-4e57-938d-d6953612552b
      schema:
        $ref: '#/components/schemas/ConfigId'
    OptionalConfigId: # see also components/schemas/ConfigId
      in: query
      name: id
      required: false
      description: unique identifier for configurations
      example: dab3e1bf-f655-4e57-938d-d6953612552b
      schema:
        $ref: '#/components/schemas/ConfigId'
  responses:
    201AcceptedSubmission:
      description: submission success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobToken'
    400BadRequest:
      description: malformed request body
      content:
        text/plain:
          schema:
            type: string
            example: "Missing required argument <X>"
    404NoTarget:
      description: target not found
      content:
        text/plain:
          schema:
            type: string
            example: "Resource not found. Target does not exist."
    409Conflict:
      description: conflicting data
      content:
        text/plain:
          schema:
            type: string
            example: "Resource does already exist."
    422SemanticProblem:
      description: semantic problem
      content:
        text/plain:
          schema:
            type: string
            example: "Argument <X> has the wrong type"
    500ServerError:
      description: unknown server-error
      content:
        text/plain:
          schema:
            type: string
            example: "Unknown problem occurred during submission"
    502BadGateway:
      description: bad gateway
      content:
        text/plain:
          schema:
            type: string
            example:
              "notification service unavailable"
    503Busy:
      description: container is busy
      content:
        text/plain:
          schema:
            type: string
            example: "Service unavailable: maximum number of submissions reached."
  callbacks:
    termination:
      '{$request.body#/CallbackUrl}':
        post:
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/JobToken'
          responses:
            '200':
              description: accept callback
